// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// HINT: See also -Z dump-mir for MIR at specific points during compilation.
fn vec_random(_1: &mut [T], _2: R, _3: usize) -> () {
    debug a => _1;
    debug range => _2;
    debug size => _3;
    let mut _0: ();
    let mut _4: rand::prelude::ThreadRng;
    let mut _5: std::ops::Range<usize>;
    let mut _6: std::ops::Range<usize>;
    let mut _8: std::option::Option<usize>;
    let mut _9: &mut std::ops::Range<usize>;
    let mut _10: isize;
    let mut _12: T;
    let mut _13: &mut rand::prelude::ThreadRng;
    let mut _14: R;
    let mut _15: &R;
    let mut _16: *const [T];
    let mut _17: usize;
    let mut _18: bool;
    scope 1 {
        debug rng => _4;
        let mut _7: std::ops::Range<usize>;
        scope 2 {
            debug iter => _7;
            let _11: usize;
            scope 3 {
                debug i => _11;
            }
        }
    }

    bb0: {
        _4 = thread_rng() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = std::ops::Range::<usize> { start: const 0_usize, end: copy _3 };
        _5 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _6) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _7 = move _5;
        goto -> bb3;
    }

    bb3: {
        _9 = &mut _7;
        _8 = <std::ops::Range<usize> as Iterator>::next(copy _9) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb7, 1: bb6, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _11 = copy ((_8 as Some).0: usize);
        _13 = &mut _4;
        _15 = &_2;
        _14 = <R as Clone>::clone(move _15) -> [return: bb8, unwind: bb12];
    }

    bb7: {
        drop(_4) -> [return: bb11, unwind continue];
    }

    bb8: {
        _12 = <ThreadRng as Rng>::gen_range::<T, R>(move _13, move _14) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        _16 = &raw const (fake) (*_1);
        _17 = PtrMetadata(move _16);
        _18 = Lt(copy _11, copy _17);
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, copy _11) -> [success: bb10, unwind: bb12];
    }

    bb10: {
        (*_1)[_11] = move _12;
        goto -> bb3;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn dotproduct(_1: &[T], _2: &[T], _3: usize) -> T {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    let mut _0: T;
    let mut _4: T;
    let mut _5: std::ops::Range<usize>;
    let mut _6: std::ops::Range<usize>;
    let mut _8: std::option::Option<usize>;
    let mut _9: &mut std::ops::Range<usize>;
    let mut _10: isize;
    let _12: ();
    let mut _13: &mut T;
    let mut _14: T;
    let mut _15: T;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: T;
    let mut _19: usize;
    let mut _20: bool;
    scope 1 {
        debug result => _4;
        let mut _7: std::ops::Range<usize>;
        scope 2 {
            debug iter => _7;
            let _11: usize;
            scope 3 {
                debug i => _11;
            }
        }
    }

    bb0: {
        _4 = <T as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = std::ops::Range::<usize> { start: const 0_usize, end: copy _3 };
        _5 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = move _5;
        goto -> bb3;
    }

    bb3: {
        _9 = &mut _7;
        _8 = <std::ops::Range<usize> as Iterator>::next(copy _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb7, 1: bb6, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _11 = copy ((_8 as Some).0: usize);
        _13 = &mut _4;
        _16 = PtrMetadata(copy _1);
        _17 = Lt(copy _11, copy _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, copy _11) -> [success: bb8, unwind continue];
    }

    bb7: {
        _0 = copy _4;
        return;
    }

    bb8: {
        _15 = copy (*_1)[_11];
        _19 = PtrMetadata(copy _2);
        _20 = Lt(copy _11, copy _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, copy _11) -> [success: bb9, unwind continue];
    }

    bb9: {
        _18 = copy (*_2)[_11];
        _14 = <T as Mul>::mul(move _15, move _18) -> [return: bb10, unwind continue];
    }

    bb10: {
        _12 = <T as AddAssign>::add_assign(move _13, move _14) -> [return: bb3, unwind continue];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _4: &[i32];
    let _5: &[i32; 3];
    let mut _6: &[i32];
    let _7: &[i32; 3];
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let _10: &[&str; 2];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &i32;
    scope 1 {
        debug a => _1;
        let _2: [i32; 3];
        scope 2 {
            debug b => _2;
            let _3: i32;
            scope 3 {
                debug result => _3;
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _2 = [const 4_i32, const 5_i32, const 6_i32];
        _5 = &_1;
        _4 = copy _5 as &[i32] (PointerCoercion(Unsize, Implicit));
        _7 = &_2;
        _6 = copy _7 as &[i32] (PointerCoercion(Unsize, Implicit));
        _3 = dotproduct::<i32>(move _4, move _6, const 3_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = const main::promoted[0];
        _14 = &_3;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<i32>(copy _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _9 = Arguments::<'_>::new_v1::<2, 1>(copy _10, copy _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = _print(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

const main::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Dot product: ", const "\n"];
        _0 = &_1;
        return;
    }
}
